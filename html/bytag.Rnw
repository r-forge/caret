<<startup,results=hide,echo=FALSE>>=

library(caret)
library(googleVis)

basePath <-getwd()
session <- paste(format(Sys.time(), "%a %b %d %Y"),
                 "using caret version",
                 packageDescription("caret")$Version,
                 "and",
                 R.Version()$version.string)
@ 
\SweaveOpts{keep.source=TRUE}

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
  <!--
  Design by Free CSS Templates
http://www.freecsstemplates.org
Released for free under a Creative Commons Attribution 2.5 License

Name       : Emerald 
Description: A two-column, fixed-width design with dark color scheme.
Version    : 1.0
Released   : 20120902

-->
  <html xmlns="http://www.w3.org/1999/xhtml">
  <head>
  <meta name="keywords" content="" />
  <meta name="description" content="" />
  <meta http-equiv="content-type" content="text/html; charset=utf-8" />
  <title>Models Available in train By Tag</title>
  <link href='http://fonts.googleapis.com/css?family=Abel' rel='stylesheet' type='text/css'>
  <link href="style.css" rel="stylesheet" type="text/css" media="screen" />
  </head>
  <body>
  <div id="wrapper">
  <div id="header-wrapper" class="container">
  <div id="header" class="container">
  <div id="logo">
  <h1><a href="#">Models Available in train By Tag</a></h1>
</div>
  <!--
  <div id="menu">
  <ul>
  <li class="current_page_item"><a href="#">Homepage</a></li>
<li><a href="#">Blog</a></li>
<li><a href="#">Photos</a></li>
<li><a href="#">About</a></li>
<li><a href="#">Contact</a></li>
</ul>
  </div>
  -->
  </div>
  <div><img src="images/img03.png" width="1000" height="40" alt="" /></div>
  </div>
  <!-- end #header -->
<div id="page">
  <div id="content">
  
<p>
The following is a basic list of model types or relevant
characteristics. There entires in these lists are arguable. For
example: random forests theoretically use feature selection but
effectively may not, support vector machines use L2 regularization
etc. 
</p>
  
<<MakeTables,results=hide,echo = FALSE>>=

models <- modelLookup()
modelKey <- read.delim(system.file("modelKey.txt", package = "caret"), stringsAsFactors = FALSE)
modelInfo <- merge(models, modelKey, all.y = TRUE)

modelInfo <- modelInfo[!grepl("scrda", modelInfo$model),]

forTable <- ddply(modelInfo,
                  .(model),
                  function(tab)
                  {
                   
                    tmp <- paste(tab$parameter, collapse = ", ")
                    if(all(tab$parameter == "parameter")) tmp <- "None"
                    out <- data.frame(type = tab$ProblemType[1],
                                      model = tab$model[1],
                                      Package = tab$Package[1],
                                      param = tmp)
                    names(out) <- c("Model Type", "method = ",
                                    "Package", "Tuning Parameter(s)")
                    out
                  })



types <- c("Bayesian Models", "Boosting", "L1 Penalization", "L2 Penalization",
           "Discriminant Analysis", "Logistic Regression", "Partial Least Squares",
           "Prototype Methods", "Kernel Methods", "Logic Regression", "Model Trees",
           "Mixture Models", "Multivariate Adaptive Regression Spline",
           "Neural Networks", "Single Trees", "Ensemble Methods",
           "Rule-Based Models", "Sparse Models", "Stepwise Methods",
           "Robust Models", "Generalized Additive Models", "Embedded Feature Selection",
           "Bagging", "Random Forest")
  
tags <- vector(mode = "list", length = length(types))
names(tags) <- types

tags[["Bayesian Models"]] <- c("nb", "vbmpRadial", "rvmLinear", "rvmPoly", "rvmRadial")
tags[["Boosting"]] <- c("ada", "blackboost", "bstLs", "bstSm", "bstTree",
                        "C5.0", "gamboost", "gbm", "glmboost", "logitBoost")
tags[["L1 Penalization"]] <- c("enet", "glmnet", "lars", "lars2", "lasso",
                               "penalized", "PenalizedLDA", "plr", "relaxo",
                               "smda", "sparseLDA", "spls")
tags[["L2 Penalization"]] <- c("enet", "glmnet", "krlsPoly", "krlsRadial",
                               "mlpWeightDecay", "multinom", "nnet", "ORFridge",
                               "pcaNNet", "pda", "pda2", "plr", "ridge", "smda",
                               "sparseLDA", "spls")
tags[["Discriminant Analysis"]] <- c("bagFDA", "hda", "hdda", "lda", "lda2", "Linda",
                                     "mda", "pda", "pda2", "qda", "QdaCov", "rda",
                                     "rrlda", "sda", "sddaLDA", "sddaQDA", "slda",
                                     "smda", "sparseLDA", "stepLDA", "stepQDA")
tags[["Logistic Regression"]] <- c("glm", "glmboost", "glmnet", "glmStepAIC", "multinom",
                                   "ORFlog", "plr", "logitBoost")
tags[["Partial Least Squares"]] <- c("gpls", "kernelpls", "ORFpls", "pls", "simpls", "spls",
                                     "widekernelpls")
tags[["Prototype Methods"]] <- c("knn", "lvq", "pam")
tags[["Kernel Methods"]] <- c("gaussprLinear", "gaussprPoly", "gaussprRadial", "kernelpls",
                              "krlsPoly", "krlsRadial", "lssvmRadial", "ORFsvm", "rvmLinear",
                              "rvmPoly", "rvmRadial", "svmLinear", "svmPoly", "svmRadial",
                              "svmRadialCost", "vbmpRadial", "widekernelpls")
tags[["Logic Regression"]] <- c("logforest", "logicBag", "logreg")

tags[["Model Trees"]] <- c("LMT", "cubist", "M5", "M5Rules")

tags[["Mixture Models"]] <- c("mda", "smda")

tags[["Multivariate Adaptive Regression Spline"]] <- c("earth", "fda", "bagEarth", "bagFDA","gcvEarth")

tags[["Neural Networks"]] <- c("nnet", "multinom", "avNNet", "mlp", "rbf", "mlpWeightDecay",
                               "rbfDDA", "pcaNNet", "neuralnet", "qrnn")
tags[["Single Trees"]] <- c("rpart", "rpart2", "partDSA", "ctree", "evtree","obliqueTree", 
                            "OneR", "J48", "C5.0Tree", "ctree2")

tags[["Rule-Based Models"]] <- c("PART", "C5.0Rules", "M5Rules", "M5", "OneR","JRip", "cubist")

tags[["Stepwise Methods"]] <- c("leapForward", "stepLDA", "leapSeq", "stepQDA", 
                                  "glmStepAIC","sddaLDA", "sddaQDA", "leapBackward",
                                  "lmStepAIC")
tags[["Robust Models"]] <- c("PART", "C5.0Rules", "M5Rules", "M5", "OneR","JRip", "cubist")

tags[["Generalized Additive Models"]] <- c("gam", "gamboost", "GAMens", "gamLoess", "gamSpline")

tags[["Bagging"]] <- c("treebag", "bag", "bagEarth", "bagFDA", "logicBag")

tags[["Random Forest"]] <- c("ORFlog", "ORFpls", "ORFridge", "ORFsvm", "qrf", "rf", "rFerns", "RRF", "RRFglobal", "cforest", "logforest")

tags[["Embedded Feature Selection"]] <- c(tags[["Stepwise Methods"]], 
                                          tags[["Rule-Based Models"]], 
                                          tags[["Single Trees"]], 
                                          tags[["L1 Penalization"]], 
                                          tags[["Multivariate Adaptive Regression Spline"]], 
                                          tags[["Logic Regression"]], 
                                          tags[["Model Trees"]])
tags[["Embedded Feature Selection"]] <- tags[["Embedded Feature Selection"]][!(tags[["Embedded Feature Selection"]] %in% c("bagEarth", "bagFDA", "logicBag"))]


tags <- tags[unlist(lapply(tags, length)) > 0]
tags <- tags[order(tolower(names(tags)))]
tags <- lapply(tags, unique)
## check to make sure entries are in model list ie. C5 entries

filenames <- paste(gsub(" ", "_", names(tags)), ".html", sep = "")

listTest <- paste("<p><a href=\"",
                  filenames,
                  "\">",
                  names(tags),
                  " (",
                  unlist(lapply(tags, length)),
                  ")</a></p>\n",
                  sep = "",
                  collapse = "")


for(i in seq(along = tags))
  {
    tags[[i]] <- unique(tags[[i]])
    these <- subset(forTable, model %in% tags[[i]])
    these <- these[order(tolower(these[,1])),]
    target <- file.path(filenames[i])
    print(gvisTable(these, options = list(width = "800px")),
          file = filenames[i])
  }

print(gvisTable(forTable, options = list(width = "800px")),
      file = file.path(basePath, "modelList.html"))
@

<<WriteList,results=html,echo=FALSE>>=
print(listTest)
@ 

<div style="clear: both;">&nbsp;</div>
  </div>
  <!-- end #content -->
<div id="sidebar">
  <ul>
  <li>
  <h2>Links</h2>
  <p><a href="modelList.html"><tt>train</tt> Model List</a></p>
  </li>
  <li>
  <h2>Topics</h2>
  <ul>
  		<li><a href="datasets.html">Data Sets</a></li>
                <li><a href="visualizations.html">Visualizations</a></li>
                <li><a href="preprocess.html">Pre-Processing</a></li>
                <li><a href="splitting.html">Data Splitting</a></li>
                <li><a href="misc.html">Miscellaneous Model Functions</a></li>
                <li><a href="training.html">Model Training and Tuning</a></li>
                <li><a href="modelList.html"><tt>train</tt> Model List</a></li>
                <li><a href="bytag.html"><tt>train</tt> Models By Tag</a></li>                
                <li><a href="varimp.html">Variable Importance</a></li>
                <li><a href="featureselection.html">Feature Selection</a></li>
                <li><a href="other.html">Other Functions</a></li>
                <li><a href="parallel.html">Parallel Processing</a></li>
</ul>
  </li>
  </ul>
  </div>
  <!-- end #sidebar -->
<div style="clear: both;">&nbsp;</div>
  </div>
  <div class="container"><img src="images/img03.png" width="1000" height="40" alt="" /></div>
  <!-- end #page -->
</div>
  <div id="footer-content"></div>
  <div id="footer">
  <p>Created on <Sexpr session>.</p>
  </div>
  <!-- end #footer -->
</body>
  </html>
