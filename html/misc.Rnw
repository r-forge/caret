<<startup,results=hide,echo=FALSE>>=
library(caret)
data(BloodBrain)
theme1 <- caretTheme()
theme1$superpose.symbol$col = c(rgb(1, 0, 0, .4), rgb(0, 0, 1, .4), 
  rgb(0.3984375, 0.7578125,0.6445312, .6))
theme1$superpose.symbol$pch = c(15, 16, 17)
theme1$superpose.cex = .8
theme1$superpose.line$col = c(rgb(1, 0, 0, .9), rgb(0, 0, 1, .9), rgb(0.3984375, 0.7578125,0.6445312, .6))
theme1$superpose.line$lwd <- 2
theme1$superpose.line$lty = 1:3
theme1$plot.symbol$col = c(rgb(.2, .2, .2, .4))
theme1$plot.symbol$pch = 16
theme1$plot.cex = .8
theme1$plot.line$col = c(rgb(1, 0, 0, .7))
theme1$plot.line$lwd <- 2
theme1$plot.line$lty = 1

library(ellipse)
library(mlbench)
data(Sonar)
session <- paste(format(Sys.time(), "%a %b %d %Y"),
                 "using caret version",
                 packageDescription("caret")$Version,
                 "and",
                 R.Version()$version.string)
@ 
\SweaveOpts{keep.source=TRUE}

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
  <!--
  Design by Free CSS Templates
http://www.freecsstemplates.org
Released for free under a Creative Commons Attribution 2.5 License

Name       : Emerald 
Description: A two-column, fixed-width design with dark color scheme.
Version    : 1.0
Released   : 20120902

-->
  <html xmlns="http://www.w3.org/1999/xhtml">
  <head>
  <meta name="keywords" content="" />
  <meta name="description" content="" />
  <meta http-equiv="content-type" content="text/html; charset=utf-8" />
  <title>Miscellaneous Model Functions</title>
  <link href='http://fonts.googleapis.com/css?family=Abel' rel='stylesheet' type='text/css'>
  <link href="style.css" rel="stylesheet" type="text/css" media="screen" />
  </head>
  <body>
  <div id="wrapper">
  <div id="header-wrapper" class="container">
  <div id="header" class="container">
  <div id="logo">
  <h1><a href="#">Miscellaneous Model Functions</a></h1>
</div>
  <!--
  <div id="menu">
  <ul>
  <li class="current_page_item"><a href="#">Homepage</a></li>
<li><a href="#">Blog</a></li>
<li><a href="#">Photos</a></li>
<li><a href="#">About</a></li>
<li><a href="#">Contact</a></li>
</ul>
  </div>
  -->
  </div>
  <div><img src="images/img03.png" width="1000" height="40" alt="" /></div>
  </div>
  <!-- end #header -->
<div id="page">
  <div id="content">
  
<h2>Yet Another <i>k</i>-Nearest Neighbor Function</h2>

<p><code>knn3</code> is a function for <i>k</i>-nearest neighbor classification. This particular implementation is a modification of the <code>knn</code> C code and returns the vote information for all of the classes (<code>knn</code> only returns the probability for the winning class). There is a formula interface via</p>
  
<p><xmp class=command>> knn3(formula, data)</xmp></p>
<p> or by passing the training data directly </p>
<p><xmp class=command>> # x is a matrix or data frame, y is a factor vector</xmp></p>
<p><xmp class=command>> knn3(x, y)</xmp></p>
<p> There are also <code>print</code> and <code>predict</code> methods. </p>

<p>For the Sonar data in the <a href="http://cran.r-project.org/web/packages/mlbench/index.html"><strong>mlbench</strong></a> package, we can fit an 11-nearest neighbor model:</p>

<<MiscKnn1,results=hide>>=
library(caret)
library(mlbench)
data(Sonar)
set.seed(808)
inTrain <- createDataPartition(Sonar$Class, p = 2/3, list = FALSE)
## Save the predictors and class in different objects
sonarTrain <- Sonar[ inTrain, -ncol(Sonar)]
sonarTest  <- Sonar[-inTrain, -ncol(Sonar)]

trainClass <- Sonar[ inTrain, "Class"]
testClass  <- Sonar[-inTrain, "Class"]

centerScale <- preProcess(sonarTrain)
centerScale

training <- predict(centerScale, sonarTrain)
testing <- predict(centerScale, sonarTest)
@
<<MiscKnn2,results=hide>>=
knnFit <- knn3(training, trainClass, k = 11)
@ 
<<MiscKnn2_print,results=html,echo=FALSE>>=
printOutput(knnFit)
@ 
<<MiscKnn3,results=hide>>=
predict(knnFit, head(testing), type = "prob")
@ 
<<MiscKnn4_print,results=html,echo=FALSE>>=
printOutput(predict(knnFit, head(as.matrix(testing)), type = "prob"))
@ 


<p> Similarly, <a href="http://cran.r-project.org/web/packages/caret/index.html"><strong>caret</strong></a> contains a <i>k</i>-nearest neighbor regression function, <code>knnreg</code>. It returns the average outcome for the neighbor.</p> 


<h2>Partial Least Squares Discriminant Analysis</h2>

<p>The <code>plsda</code> function is a wrapper for the <code>plsr</code> function in the <a href="http://cran.r-project.org/web/packages/pls/index.html"><strong>pls</strong></a> package that does not require a formula interface and can take factor outcomes as arguments. The classes are broken down into dummy variables (one for each class). These 0/1 dummy variables are modeled by partial least squares. 

<p>
From this model, there are two approaches to computing the class predictions and probabilities:
<ul>
   <li>the softmax technique can be used on a per-sample basis to
   normalize the scores so that they are more ``probability like''
   (i.e. they sum to one and are between zero and one). For a vector
   of model predictions for each class <i>X</i>, the softmax class
   probabilities are computed as. The predicted class is simply the class with the largest model prediction, or equivalently, the largest class probability. This is the default behavior for <code>plsda</code>.</li>
   
   <li>Bayes rule can be applied to the model predictions to form posterior probabilities. Here, the model predictions for the training set are used along with the training set outcomes to create conditional distributions for each class. When new samples are predicted, the raw model predictions are run through these conditional distributions to produce a posterior probability for each class (along with the prior). Bayes rule can be used by specifying <code>probModel = "Bayes"</code>. An additional parameter, <code>prior</code>, can be used to set prior probabilities  for the classes. </li>
</ul>
 </p>
<p>The advantage to using Bayes rule is that the full training set is used to directly compute the class probabilities (unlike the softmax function which only uses the current sample's scores). This creates more realistic probability estimates but the disadvantage is that a separate Bayesian model must be created for each value of <code>ncomp</code>, which is more time consuming.  
 </p>
<p>For the sonar data set, we can fit two PLS models using each technique and predict the class probabilities for the test set. 
</p>

<<MiscPls1,results=hide>>=
plsFit <- plsda(training, trainClass, ncomp = 20)
plsFit
@
<<MiscPls1,results=html,echo=FALSE>>=
printOutput(plsFit)
@ 
<<MiscPls2,results=hide>>=
plsBayesFit <- plsda(training, trainClass, ncomp = 20,
                     probMethod = "Bayes")
plsBayesFit
@
<<MiscPls2,results=html,echo=FALSE>>=
printOutput(plsBayesFit)
@
<<MiscPls3,results=hide>>=
predict(plsFit, head(testing), type = "prob")
@
<<MiscPls3,results=html,echo=FALSE>>=
printOutput(predict(plsFit, head(testing), type = "prob"))
@
<<MiscPls4,results=hide>>=
predict(plsBayesFit, head(testing), type = "prob")
@
<<MiscPls4,results=html,echo=FALSE>>=
printOutput(predict(plsBayesFit, head(testing), type = "prob"))
@

<p>Similar to <code>plsda</code>, <code>caret</code> also contains a function <code>splsda</code> that allows for classification using sparse PLS. A dummy 
matrix is created for each class and used with the <code>spls</code> function in the <a href="http://cran.r-project.org/web/packages/spls/index.html"><strong>spls</strong></a> package. The same approach to estimating class probabilities is used for <code>plsda</code> and <code>splsda</code>.
</p>


<h2>Bagged MARS and FDA</h2>

<p>
Multivariate adaptive regression splines (MARS) models, like classification/regression trees, are unstable predictors (Breiman, 1996). This means that small perturbations in the training data might lead to significantly different models. Bagged trees and random forests are effective ways of improving tree models by exploiting these instabilities. <code>caret</code> contains a function, <code>bagEarth</code>, that fits MARS models via the <code>earth</code> function. There are formula and non-formula interfaces. 
</p>
<p>
Also, flexible discriminant analysis is a generalization of linear discriminant analysis that can use non-linear features as inputs. One way of doing this is the use MARS-type features to classify samples. The function <code>bagFDA</code> fits FDA models of a set of bootstrap samples and aggregates the predictions to reduce noise.
</p>
<p>
This function is deprecated in favor of the <code>bag</code> function.
</p>

<h2>Model Averaged Neural Networks</h2>

<p>
The <code>avNNet</code> fits multiple neural network models to the same data set and predicts using the average of the predictions coming from each constituent model. The models can be different either due to different random number seeds to initialize the network or by fitting the models on bootstrap samples of the original training set (i.e. bagging the neural network). For classification models, the class probabilities are averaged to produce the final class prediction (as opposed to voting from the individual class predictions. 
</p>
<p>As an example, the model can be fit via <code>train</code>:</p>
<p><xmp class=command>> set.seed(825) </xmp></p>
<p><xmp class=command>> avNnetFit <- train(x = training,</xmp></p>
<p><xmp class=command>>                    y = trainClass,</xmp></p>
<p><xmp class=command>>                    method = "avNNet", </xmp></p>
<p><xmp class=command>>                    repeats = 15,</xmp></p>
<p><xmp class=command>>                    trace = FALSE) </xmp></p>

<h2>Neural Networks with a Principal Component Step</h2>

<p>
Neural networks can be affected by severe amounts of multicollinearity
in the predictors. The function <code>pcaNNet</code> is a wrapper around
the <code>preProcess</code> and <code>nnet</code> functions that will run
principal component analysis on the predictors before using them as
inputs into a neural network. The function will keep enough components
that will capture some pre-defined threshold on the cumulative
proportion of variance (see the <code>thresh</code>
argument). For new samples, the same transformation is applied to the new predictor values (based on the loadings from the training set). The function is available for both regression and classification. 
</p>
<p>
This function is deprecated in favor of the <code>train</code> function using <code>method = "nnet"</code> and <code>preProc = "pca"</code>.
</p>

<h2>Independent Component Regression</h2>

<p>
The <code>icr</code> function can be used to fit a model analogous to
principal component regression (PCR), but using independent component
analysis (ICA). The predictor data are centered and projected to the
ICA components. These components are then regressed against the
outcome. The user needed to specify the number of components to keep.
</p>
<p>
The model uses the <code>preProcess</code> function to compute the latent
variables using the  <a href="http://cran.r-project.org/web/packages/fastICA/index.html" <strong>fastICA</strong></a> package.
</p>
<p>
Like PCR, there is no guarantee that there will be a correlation
between the new latent variable and the outcomes.
</p>

<h2>Bagging</h2>

<p>The <code>bag</code> function offers a general platform for bagging classification and regression models. Like <code>rfe</code> and <code>sbf</code>, it is open and models are specified by declaring functions for the model fitting and prediction code (and several built-in sets of functions exist in the package). The function <code>bagControl</code> has options to specify the functions (more details below).</p>

<p> The function also has a few non-standard features:</p>
   <ul>
      <li> The argument <code>var</code> can enable random sampling of the predictors at each bagging iteration. This is to de-correlate the bagged models in the same spirit of random forests (although here the sampling is done once for the whole model). The default is to use all the predictors for each model.</li>
      <li> The <code>bagControl</code> function has a logical argument called <code>downSample</code> that is useful for classification models with severe class imbalance. The bootstrapped data set is reduced so that the sample sizes for the classes with larger frequencies are the same as the sample size for the minority class.</li>
      <li>If a parallel backend for the <strong>foreach</strong> package has been loaded and registered, the bagged models can be trained in parallel.</li>
   </ul>
<p>The function's control function requires the following arguments:</p>

<h3>The <code>fit</code> Function</h3>

<p>Inputs:
<ul>
 <li> <code>x</code>: a data frame of the training set predictor data. 
   <li> <code>y</code>: the training set outcomes.
   <li> <code>...</code> arguments passed from <code>train</code> to this function
</ul>
</p>
<p>
The output is the object corresponding to the trained model and any
other objects required for prediction. A simple example for a linear discriminant analysis model from the <strong>MASS</strong> package is:
</p>
<p><xmp class=command>> function(x, y, ...) {</xmp></p>
<p><xmp class=command>>    library(MASS)</xmp></p>
<p><xmp class=command>>    lda(x, y, ...)</xmp></p>
 <p><xmp class=command>> }</xmp></p>

<h3>The <code>pred</code> Function</h3>

<p>
This should be a function that produces predictors for new samples.
</p>
<p>Inputs:
<ul>
 <li> <code>object</code>: the object generated by the <code>fit</code> module. 
   <li> <code>x</code>: a matrix or data frame of predictor data.
</ul>
</p>
<p>
The output is either a number vector (for
regression), a factor (or character) vector for classification or a
matrix/data frame of class probabilities. For classification, it is probably better to average class probabilities instead of using the votes of the class predictions. Using the <code>lda</code> example again:
</p>
<p><xmp class=command>> ## predict.lda returns the class and the class probabilities</xmp></p>
<p><xmp class=command>> ## We will average the probabilities, so these are saved</xmp></p>
<p><xmp class=command>> function(object, x) predict(object, x)$posterior</xmp></p>

<h3>The <code>aggregate</code> Function</h3>

<p>
This should be a function that takes the predictions from the constituent models and converts them to a single prediction per sample.
</p>
<p>Inputs:
<ul>
   <li> <code>x</code>: a list of objects returned by the <code>pred</code> module. 
   <li> <code>type</code>: an optional string that describes the type of output (e.g. "class", "prob" etc.).
</ul>
</p>
<p>
The output is either a number vector (for
regression), a factor (or character) vector for classification or a
matrix/data frame of class probabilities. For the linear discriminant model above, we saved the matrix of class probabilities. To average them and generate a class prediction, we could use:
</p>
<p><xmp class=command>> function(x, type = "class") {</xmp></p>
<p><xmp class=command>>   ## The class probabilities come in as a list of matrices</xmp></p>
<p><xmp class=command>>   ## For each class, we can pool them then average over them</xmp></p>
<p><xmp class=command>>   </xmp></p>
<p><xmp class=command>>   ## Pre-allocate space for the results</xmp></p>
<p><xmp class=command>>   pooled <- x[[1]] * NA</xmp></p>
<p><xmp class=command>>   n <- nrow(pooled)</xmp></p>
<p><xmp class=command>>   classes <- colnames(pooled)</xmp></p>
<p><xmp class=command>>   ## For each class probability, take the median across </xmp></p>
<p><xmp class=command>>   ## all the bagged model predictions</xmp></p>
<p><xmp class=command>>   for(i in 1:ncol(pooled))</xmp></p>
<p><xmp class=command>>   {</xmp></p>
<p><xmp class=command>>     tmp <- lapply(x, function(y, col) y[,col], col = i)</xmp></p>
<p><xmp class=command>>     tmp <- do.call("rbind", tmp)</xmp></p>
<p><xmp class=command>>     pooled[,i] <- apply(tmp, 2, median)</xmp></p>
<p><xmp class=command>>   }</xmp></p>
<p><xmp class=command>>   ## Re-normalize to make sure they add to 1</xmp></p>
<p><xmp class=command>>   pooled <- apply(pooled, 1, function(x) x/sum(x))</xmp></p>
<p><xmp class=command>>   if(n != nrow(pooled)) pooled <- t(pooled)</xmp></p>
<p><xmp class=command>>   if(type == "class")</xmp></p>
<p><xmp class=command>>   {</xmp></p>
<p><xmp class=command>>     out <- factor(classes[apply(pooled, 1, which.max)],</xmp></p>
<p><xmp class=command>>                   levels = classes)</xmp></p>
<p><xmp class=command>>   } else out <- as.data.frame(pooled)</xmp></p>
<p><xmp class=command>>   out</xmp></p>
<p><xmp class=command>> }</xmp></p>
<p>For example, to bag a conditional inference tree (from the <strong>party</strong> package):</p>
<<Misc_bag,results=hide,echo=FALSE>>=
library(caret)
set.seed(998)
inTraining <- createDataPartition(Sonar$Class, p = .75, list = FALSE)
training <- Sonar[ inTraining,]
testing  <- Sonar[-inTraining,]
set.seed(825)
baggedCT <- bag(x = training[, names(training) != "Class"],
                y = training$Class,
                B = 50,
                bagControl = bagControl(fit = ctreeBag$fit,
                                        predict = ctreeBag$pred,
                                        aggregate = ctreeBag$aggregate))              
@ 
<p><xmp class=command>>   set.seed(825)</xmp></p>
<p><xmp class=command>>   baggedCT <- bag(x = training[, names(training) != "Class"],</xmp></p>
<p><xmp class=command>>                   y = training$Class,</xmp></p>
<p><xmp class=command>>                   B = 50,</xmp></p>
<p><xmp class=command>>                   bagControl = bagControl(fit = ctreeBag$fit,</xmp></p>
<p><xmp class=command>>                                           predict = ctreeBag$pred,</xmp></p>
<p><xmp class=command>>                                           aggregate = ctreeBag$aggregate))</xmp></p>
<p><xmp class=command>>   summary(baggedCT)</xmp></p>
<<Misc_bag_print,results=html,echo=FALSE>>=
printOutput(summary(baggedCT))
@



<div style="clear: both;">&nbsp;</div>
  </div>
  <!-- end #content -->
<div id="sidebar">
  <ul>
  <li>
  <h2>Links</h2>
  <p><a href="modelList.html"><tt>train</tt> Model List</a></p>
  </li>
  <li>
  <h2>Topics</h2>
  <ul>
          <li><a href="index.html">Main Page</a></li>
  		<li><a href="datasets.html">Data Sets</a></li>
                <li><a href="visualizations.html">Visualizations</a></li>
                <li><a href="preprocess.html">Pre-Processing</a></li>
                <li><a href="splitting.html">Data Splitting</a></li>
                <li><a href="misc.html">Miscellaneous Model Functions</a></li>
                <li><a href="training.html">Model Training and Tuning</a></li>
                <li><a href="modelList.html"><tt>train</tt> Model List</a></li>
                <li><a href="bytag.html"><tt>train</tt> Models By Tag</a></li>
                <li><a href="varimp.html">Variable Importance</a></li>
                <li><a href="featureselection.html">Feature Selection</a></li>
                <li><a href="other.html">Other Functions</a></li>
                <li><a href="parallel.html">Parallel Processing</a></li>
</ul>
  </li>
  </ul>
  </div>
  <!-- end #sidebar -->
<div style="clear: both;">&nbsp;</div>
  </div>
  <div class="container"><img src="images/img03.png" width="1000" height="40" alt="" /></div>
  <!-- end #page -->
</div>
  <div id="footer-content"></div>
  <div id="footer">
  <p>Created on <Sexpr session>.</p>
  </div>
  <!-- end #footer -->
</body>
  </html>
