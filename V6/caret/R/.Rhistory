everywhereFeatures
everywhereFeatures <- getFeatures(everywhere3)
everywhereFeatures$everywhere_Count <- nrow(everywhere2)
everywhereFeatures
library(caret)
library(data.table)
filterData <- function(x)
{
thresh1 <- quantile(x$Value.inCell.a.h.cor.s1, probs = .99)
thresh2 <- quantile(x$Value.inCell.Ba.h.cor.s1, probs = .99)
x <- as.data.frame(x)
x[x$Value.inCell.a.h.cor.s1 <= thresh1 &
x$Value.inCell.Ba.h.cor.s1 <= thresh2 &
x$Value.inCell.Ba.m.majoraxis <= 250,]
}
filterProteinData <- function(x)
{
thresh1 <- quantile(x$Value.protein.a.h.sav.s1, probs = .99)
thresh2 <- quantile(x$Value.protein.a.b.q05, probs = .99)
thresh2 <- quantile(x$Value.protein.Ba.b.mean, probs = .99)
x <- as.data.frame(x)
x[x$Value.protein.a.h.sav.s1 <= thresh1 &
x$Value.protein.a.b.q05 <= thresh2 &
x$Value.protein.Ba.b.mean <= thresh2,]
}
getFeatures <- function(dat)
{
dat_Pct <- ddply(dat, .(variable),
function(x)
{
qval <- quantile(x$value, probs = (1:9)/10, na.rm = TRUE)
data.frame(Pct = qval, Prob = paste("p", (1:9)*10, sep = ""))
})
dat_Pct$variable <- paste(gsub("Value.", "", dat_Pct$variable),
dat_Pct$Prob, sep = "_")
dat_Pct$Prob <- NULL
mat_Pct <- as.data.frame(matrix(dat_Pct$Pct, ncol = nrow(dat_Pct)))
names(mat_Pct) <- as.character(dat_Pct$variable)
mat_Pct
}
load("/Users/kuhna03/Projects/2013.07.09.13.09.22/celldata_B17.RData")
cellLevel <- cellLevel[-grep("(cx)|(cy)", cellLevel$Feature),]
well <- cellLevel$Well[1]
plate <- cellLevel$Plate[1]
path <- cellLevel$Path[1]
cellLevel$Well <- cellLevel$Path <- cellLevel$Plate <- NULL
cellLevel$ID <- paste(cellLevel$Field, cellLevel$Object, sep = "_")
cellLevel$Field <- cellLevel$Object <- NULL
inCell <- cellLevel[grep("inCell", cellLevel$Feature),]
inCell2 <- reshape(inCell,
direction = "wide",
idvar = "ID",
timevar = "Feature",
v.names = "Value")
inCell2 <- filterData(inCell2)
inCell3 <- melt(inCell2[, -1])
inCellFeatures <- getFeatures(inCell3)
inCellFeatures$inCell_Count <- nrow(inCell2)
inCellFeatures
everywhere <- cellLevel[grep("protein", cellLevel$Feature),]
everywhere2 <- reshape(everywhere,
direction = "wide",
idvar = "ID",
timevar = "Feature",
v.names = "Value")
everywhere2 <- filterProteinData(everywhere2)
everywhere3 <- melt(everywhere2[, -1])
everywhereFeatures <- getFeatures(everywhere3)
everywhereFeatures$everywhere_Count <- nrow(everywhere2)
both <- cbind(everywhereFeatures, inCellFeatures)
both$Well <- well
both$Plate <- plate
both$Path <- path
everywhereFeatures
cell2well <- function(x)
{
x <- x[-grep("(cx)|(cy)", x$Feature),]
well <- x$Well[1]
plate <- x$Plate[1]
path <- x$Path[1]
x$Well <- x$Path <- x$Plate <- NULL
x$ID <- paste(x$Field, x$Object, sep = "_")
x$Field <- x$Object <- NULL
inCell <- x[grep("inCell", x$Feature),]
inCell2 <- reshape(inCell,
direction = "wide",
idvar = "ID",
timevar = "Feature",
v.names = "Value")
inCell2 <- filterData(inCell2)
inCell3 <- melt(inCell2[, -1])
inCellFeatures <- getFeatures(inCell3)
inCellFeatures$inCell_Count <- nrow(inCell2)
everywhere <- x[grep("protein", x$Feature),]
everywhere2 <- reshape(everywhere,
direction = "wide",
idvar = "ID",
timevar = "Feature",
v.names = "Value")
everywhere2 <- filterProteinData(everywhere2)
everywhere3 <- melt(everywhere2[, -1])
everywhereFeatures <- getFeatures(everywhere3)
everywhereFeatures$everywhere_Count <- nrow(everywhere2)
both <- cbind(everywhereFeatures, inCellFeatures)
both$Well <- well
both$Plate <- plate
both$Path <- path
both
}
load("/Users/kuhna03/Projects/2013.07.09.13.09.22/celldata_I17.RData")
cell2well(cellLevel)
files <- list.files("/Users/kuhna03/Projects/2013.07.09.13.09.22/",
pattern = "celldata")
files
features <- vector(mode = "list", length = length(files))
library(caret)
library(data.table)
filterData <- function(x)
{
thresh1 <- quantile(x$Value.inCell.a.h.cor.s1, probs = .99)
thresh2 <- quantile(x$Value.inCell.Ba.h.cor.s1, probs = .99)
x <- as.data.frame(x)
x[x$Value.inCell.a.h.cor.s1 <= thresh1 &
x$Value.inCell.Ba.h.cor.s1 <= thresh2 &
x$Value.inCell.Ba.m.majoraxis <= 250,]
}
filterProteinData <- function(x)
{
thresh1 <- quantile(x$Value.protein.a.h.sav.s1, probs = .99)
thresh2 <- quantile(x$Value.protein.a.b.q05, probs = .99)
thresh2 <- quantile(x$Value.protein.Ba.b.mean, probs = .99)
x <- as.data.frame(x)
x[x$Value.protein.a.h.sav.s1 <= thresh1 &
x$Value.protein.a.b.q05 <= thresh2 &
x$Value.protein.Ba.b.mean <= thresh2,]
}
getFeatures <- function(dat)
{
dat_Pct <- ddply(dat, .(variable),
function(x)
{
qval <- quantile(x$value, probs = (1:9)/10, na.rm = TRUE)
data.frame(Pct = qval, Prob = paste("p", (1:9)*10, sep = ""))
})
dat_Pct$variable <- paste(gsub("Value.", "", dat_Pct$variable),
dat_Pct$Prob, sep = "_")
dat_Pct$Prob <- NULL
mat_Pct <- as.data.frame(matrix(dat_Pct$Pct, ncol = nrow(dat_Pct)))
names(mat_Pct) <- as.character(dat_Pct$variable)
mat_Pct
}
cell2well <- function(x)
{
x <- x[-grep("(cx)|(cy)", x$Feature),]
well <- x$Well[1]
plate <- x$Plate[1]
path <- x$Path[1]
x$Well <- x$Path <- x$Plate <- NULL
x$ID <- paste(x$Field, x$Object, sep = "_")
x$Field <- x$Object <- NULL
inCell <- x[grep("inCell", x$Feature),]
inCell2 <- reshape(inCell,
direction = "wide",
idvar = "ID",
timevar = "Feature",
v.names = "Value")
inCell2 <- filterData(inCell2)
inCell3 <- melt(inCell2[, -1])
inCellFeatures <- getFeatures(inCell3)
inCellFeatures$inCell_Count <- nrow(inCell2)
everywhere <- x[grep("protein", x$Feature),]
everywhere2 <- reshape(everywhere,
direction = "wide",
idvar = "ID",
timevar = "Feature",
v.names = "Value")
everywhere2 <- filterProteinData(everywhere2)
everywhere3 <- melt(everywhere2[, -1])
everywhereFeatures <- getFeatures(everywhere3)
everywhereFeatures$everywhere_Count <- nrow(everywhere2)
both <- cbind(everywhereFeatures, inCellFeatures)
both$Well <- well
both$Plate <- plate
both$Path <- path
both
}
files <- list.files("/Users/kuhna03/Projects/2013.07.09.13.09.22/",
pattern = "celldata")
features <- vector(mode = "list", length = length(files))
for(i in seq_along(features))
{
load(files[i])
features[[i]] <- cell2well(cellLevel)
rm(cellLevel)
}
?list.files
files <- list.files("/Users/kuhna03/Projects/2013.07.09.13.09.22/",
pattern = "celldata",
full.names = TRUE)
features <- vector(mode = "list", length = length(files))
for(i in seq_along(features))
{
load(files[i])
features[[i]] <- cell2well(cellLevel)
rm(cellLevel)
}
features2 <- do.call("rbind", features)
str(features2)
nearZeroVar(features2)
features2 <- features2[, -nearZeroVar(features2)]
str(features2)
features_pp <- preProcess(features2, c("YeoJohnson", "pca"))
lapply(features2, class)
features_pp <- preProcess(features2[, -ncol(features2)], c("YeoJohnson", "pca"))
warnings()
features_pca <- predict(features_pp, features2[, -ncol(features2)])
splom(~features_pca[, 1:3])
features2$Well
substring(features2$Well, 1, 1)
features_pca$Column <- substring(features2$Well, 1, 1)
splom(~features_pca[, 1:3], groups = features_pca$Column)
trellis.par.set(caretTheme())
features_pca$Column <- substring(features2$Well, 1, 1)
splom(~features_pca[, 1:3], groups = features_pca$Column, auot.key = list(columns = 5))
features_pca$Column <- substring(features2$Well, 1, 1)
splom(~features_pca[, 1:3], groups = features_pca$Column, auto.key = list(columns = 5))
features_pca$Compound <- ""
features_pca$Compound[features_pca$Column %in% c("A", "F", "K")] <- "BAY-11708"
features_pca$Compound[features_pca$Column %in% c("B", "G", "L")] <- "Parthenolide"
features_pca$Compound[features_pca$Column %in% c("C", "H", "M")] <- "CP-456773"
features_pca$Compound[features_pca$Column %in% c("D", "I", "N")] <- "CP-539489"
features_pca$Compound[features_pca$Column %in% c("E", "J", "O")] <- "PF-06426779"
features_pca$Compound[features_pca$Column %in% c("P")] <- "Negative"
splom(~features_pca[, 1:3], groups = features_pca$Compound)
splom(~features_pca[, 1:3], groups = features_pca$Compound,
auto.key = list(columns = 5))
features_pca$Row <- substring(features2$Well, 2, 3)
neg <- subset(features_pca, Compound == "Negative")
high <- subset(features_pca, Column %in% == c("13", "14"))
plotData <- rbind(neg, high)
high <- subset(features_pca, Column %in% c("13", "14"))
plotData <- rbind(neg, high)
dim(high)
table(features_pca$Column)
features_pca$Row <- substring(features2$Well, 1, 1)
features_pca$Column <- substring(features2$Well, 2, 3)
features_pca$Compound <- ""
features_pca$Compound[features_pca$Row %in% c("A", "F", "K")] <- "BAY-11708"
features_pca$Compound[features_pca$Row %in% c("B", "G", "L")] <- "Parthenolide"
features_pca$Compound[features_pca$Row %in% c("C", "H", "M")] <- "CP-456773"
features_pca$Compound[features_pca$Row %in% c("D", "I", "N")] <- "CP-539489"
features_pca$Compound[features_pca$Row %in% c("E", "J", "O")] <- "PF-06426779"
features_pca$Compound[features_pca$Row %in% c("P")] <- "Negative"
neg <- subset(features_pca, Compound == "Negative")
high <- subset(features_pca, Row %in% c("13", "14"))
plotData <- rbind(neg, high)
dim(high)
dim(neg)
table(features_pca$Row)
high <- subset(features_pca, Column %in% c("13", "14"))
plotData <- rbind(neg, high)
dim(high)
splom(~plotData[, 1:3], groups = plotData$Compound,
auto.key = list(columns = 6))
plotData[, 1:3]
features2$Well <- features2$Well
features2$Row <- substring(features2$Well, 1, 1)
features2$Column <- substring(features2$Well, 2, 3)
features2$Compound <- ""
features2$Compound[features2$Row %in% c("A", "F", "K")] <- "BAY-11708"
features2$Compound[features2$Row %in% c("B", "G", "L")] <- "Parthenolide"
features2$Compound[features2$Row %in% c("C", "H", "M")] <- "CP-456773"
features2$Compound[features2$Row %in% c("D", "I", "N")] <- "CP-539489"
features2$Compound[features2$Row %in% c("E", "J", "O")] <- "PF-06426779"
features2$Compound[features2$Row %in% c("P")] <- "Negative"
names(features2)
high <- subset(features2, Column %in% c("13", "14") &
Row %in% "A")
dim(high)
high <- subset(features2, Column %in% c("13", "14") &
Row %in% "A")
neg <- subset(features2, Compound == "Negative")
bothData <- rbind(neg, high)
filterVarImp(bothData[, -(877:880)], bothData$Compound)
bothData$Compound
filterVarImp(bothData[, -(877:880)], factor(bothData$Compound))
rocs <- filterVarImp(bothData[, -(877:880)], factor(bothData$Compound))
rocs <- rocs[order(-rocs$high),]
rocs <- rocs[order(-rocs$BAY.11708),]
rocs
?t.test
function(x) factor(bothData$Compound))
filterVarImp(bothData[, -(877:880)], factor(bothData$Compound))
t.test(1:10, y = c(7:20))
t.test(1:10, y = c(7:20))$statistic
tstat <- apply(bothData[, -(877:880)], 2,
function(x, y) abs(t.test(y ~ x)$statistic),
y = factor(bothData$Compound))
factor(bothData$Compound)
tstat <- apply(bothData[, -(877:880)], 2,
function(x, y) abs(t.test(x ~ y)$statistic),
y = factor(bothData$Compound))
str(bothData[, -(877:880)])
tstat <- apply(bothData[, -(877:880)], 2,
function(x, y)
{
if(length(unique(x)) == 1) return(0)
abs(t.test(x ~ y)$statistic)
},
y = factor(bothData$Compound))
tstat
tstat[order(tstat)]
tstat <- tstat[order(-tstat)]
selected <- tstat[1:50]
selected
selected <- names(tstat[1:50])
selected
features_pp <- preProcess(features2[, selected], c("YeoJohnson", "pca"))
features_pca <- predict(features_pp, features2[, selected])
neg2 <- subset(features_pca, Compound == "Negative")
high2 <- subset(features_pca, Column %in% c("13", "14"))
plotData2 <- rbind(neg2, high2)
features_pca$Column <- features2$Column
neg2 <- subset(features_pca, Compound == "Negative")
high2 <- subset(features_pca, Column %in% c("13", "14"))
plotData2 <- rbind(neg2, high2)
features_pca$Compound <- features2$Compound
features_pca$Column <- features2$Column
neg2 <- subset(features_pca, Compound == "Negative")
high2 <- subset(features_pca, Column %in% c("13", "14"))
plotData2 <- rbind(neg2, high2)
splom(~plotData[, 1:3], groups = plotData$Compound,
auto.key = list(columns = 6))
splom(~plotData[, 1:3]|features_pca$Column,
groups = plotData$Compound,
auto.key = list(columns = 6))
features_pca$Row <- features2$Row
neg2 <- subset(features_pca, Compound == "Negative")
high2 <- subset(features_pca, Column %in% c("13", "14"))
plotData2 <- rbind(neg2, high2)
splom(~plotData[, 1:3],
groups = paste(plotData$Compound, plotData$Row),
auto.key = list(columns = 6))
library(AppliedPredictiveModeling)
thm <- bookTheme(set = FALSE)
thm
thm$superpose.symbol$col[1:6]
thm <- bookTheme(set = FALSE)
cols <- thm$superpose.symbol$col[1:6]
shapes <- thm$superpose.symbol$pch[1:6]
thm$superpose.symbol$col <- rep(cols, each = 2)
thm$superpose.symbol$pch <- rep(shapes, 2)
trellis.par.set(thm)
splom(~plotData[, 1:3],
groups = paste(plotData$Compound, plotData$Row),
auto.key = list(columns = 6))
thm$superpose.symbol$cex = 1.5
trellis.par.set(thm)
splom(~plotData[, 1:3],
groups = paste(plotData$Compound, plotData$Row),
auto.key = list(columns = 6))
thm$superpose.symbol$col <- c(rep(cols[1:3], each = 2),
cols[4],
rep(cols[5:6], each = 2))
thm$superpose.symbol$pch <- rep(shapes, 2)
thm$superpose.symbol$cex = 1.5
trellis.par.set(thm)
splom(~plotData[, 1:3],
groups = paste(plotData$Compound, plotData$Row),
auto.key = list(columns = 6))
thm <- transparentTheme(set = FALSE)
cols <- thm$superpose.symbol$col[1:6]
shapes <- thm$superpose.symbol$pch[1:6]
thm$superpose.symbol$col <- c(rep(cols[1:3], each = 2),
cols[4],
rep(cols[5:6], each = 2))
thm$superpose.symbol$pch <- rep(shapes, 2)
thm$superpose.symbol$cex = 1.5
trellis.par.set(thm)
splom(~plotData[, 1:3],
groups = paste(plotData$Compound, plotData$Row),
auto.key = list(columns = 6))
thm <- bookTheme(set = FALSE)
cols <- thm$superpose.symbol$col[1:6]
shapes <- thm$superpose.symbol$pch[1:6]
thm$superpose.symbol$col <- c(rep(cols[1:3], each = 2),
cols[4],
rep(cols[5:6], each = 2))
thm$superpose.symbol$pch <- rep(shapes, 2)
thm$superpose.symbol$cex = 1.5
trellis.par.set(thm)
splom(~plotData[, 1:3],
groups = paste(plotData$Compound, plotData$Row),
auto.key = list(columns = 6))
plot(1:19, pch = 1:19, cex = 2)
plot(0:19, pch = 0:19, cex = 2)
plot(0:22, pch = 0:22, cex = 2)
thm <- bookTheme(set = FALSE)
cols <- thm$superpose.symbol$col[1:6]
shapes <- thm$superpose.symbol$pch[1:6]
thm$superpose.symbol$col <- c(rep(cols[1:3], each = 2),
"black",
rep(cols[4:5], each = 2))
thm$superpose.symbol$pch <- c(1, 16, 2, 17, 5, 8,
16,
0, 15, 3:4)
thm$superpose.symbol$cex = 1.5
trellis.par.set(thm)
splom(~plotData[, 1:3],
groups = paste(plotData$Compound, plotData$Row),
auto.key = list(columns = 6))
thm <- bookTheme(set = FALSE)
cols <- thm$superpose.symbol$col[1:6]
shapes <- thm$superpose.symbol$pch[1:6]
thm$superpose.symbol$col <- c(rep(cols[1:3], each = 2),
rgb(.2, .2, .2, .4),
rep(cols[4:5], each = 2))
thm$superpose.symbol$pch <- c(16, 1, 17, 2, 8, 5,
16,
15, 0, 3:4)
thm$superpose.symbol$cex = 1.5
trellis.par.set(thm)
splom(~plotData[, 1:3],
groups = paste(plotData$Compound, plotData$Row),
auto.key = list(columns = 6))
thm <- bookTheme(set = FALSE)
cols <- thm$superpose.symbol$col[1:6]
shapes <- thm$superpose.symbol$pch[1:6]
thm$superpose.symbol$col <- c(rep(cols[1:3], each = 2),
rgb(.2, .2, .2, .4),
rep(cols[4:5], each = 2))
thm$superpose.symbol$pch <- c(15, 0, 15, 0, 15, 0,
16,
15, 0, 15, 0)
thm$superpose.symbol$cex = 1.5
trellis.par.set(thm)
splom(~plotData[, 1:3],
groups = paste(plotData$Compound, plotData$Row),
auto.key = list(columns = 6))
library(AppliedPredictiveModeling)
data(solubility)
fpCols<- grepl("FP", names(solTrainXtrans))
getTstats <- function(x, y)
{
tTest <- t.test(y~x)
out <- c(tStat = tTest$statistic, p = tTest$p.value)
out
}
tVals <- apply(solTrainXtrans[, fpCols],
MARGIN = 2,
FUN = getTstats,
y = solTrainY)
## switch the dimensions
tVals <- t(tVals)
head(tVals)
xyplot(-log10(p) ~ tStat.t, data = tVals)
library(lattice)
xyplot(-log10(p) ~ tStat.t, data = tVals)
class(tVals)
tVals <- as.data.frame(tVals)
library(lattice)
xyplot(-log10(p) ~ tStat.t, data = tVals)
getTstats <- function(x, y)
{
tTest <- t.test(y~x)
out <- c(tStat = tTest$statistic,
Difference = tTest$estimate,
p = tTest$p.value)
out
}
tVals <- apply(solTrainXtrans[, fpCols],
MARGIN = 2,
FUN = getTstats,
y = solTrainY)
## switch the dimensions
tVals <- t(tVals)
tVals <- as.data.frame(tVals)
head(tVals)
t.test(solTrainY ~ solTrainXtrans$FP044)
getTstats <- function(x, y)
{
tTest <- t.test(y~x)
out <- c(tStat = tTest$statistic,
Difference = diff(tTest$estimate),
p = tTest$p.value)
out
}
tVals <- apply(solTrainXtrans[, fpCols],
MARGIN = 2,
FUN = getTstats,
y = solTrainY)
## switch the dimensions
tVals <- t(tVals)
tVals <- as.data.frame(tVals)
head(tVals)
getTstats <- function(x, y)
{
tTest <- t.test(y~x)
out <- c(tStat = tTest$statistic,
Difference = as.vector(diff(tTest$estimate)),
p = tTest$p.value)
out
}
tVals <- apply(solTrainXtrans[, fpCols],
MARGIN = 2,
FUN = getTstats,
y = solTrainY)
## switch the dimensions
tVals <- t(tVals)
tVals <- as.data.frame(tVals)
head(tVals)
xyplot(-log10(p) ~ Difference, data = tVals)
