out <- data.frame(probMatrix)
colnames(out) <- obsLevels
rownames(out) <- NULL
out
},
tags = c("Random Forest", "Ensemble Model", "Bagging", "Implicit Feature Selection"),
levels = function(x) levels(x@data@get("response")[,1]),
sort = function(x) x)
tt <- train(Species ~ ., data = iris, method = modelInfo)
tt
modelInfo <- list(library = "party",
loop = NULL,
type = c('Regression', 'Classification'),
parameters = data.frame(parameter = c('maxdepth'),
class = c('numeric'),
label = c('Max Tree Depth')),
grid = function(x, y, len = NULL) {
data.frame(.maxdepth = 1:len)
},
fit = function(x, y, wts, param, lev, last, classProbs, ...) {
dat <- x
dat$.outcome <- y
theDots <- list(...)
if(any(names(theDots) == "controls"))
{
theDots$controls@tgctrl@maxdepth <- param$.maxdepth
theDots$controls@gtctrl@mincriterion <- 0
ctl <- theDots$controls
theDots$controls <- NULL
} else ctl <- do.call(getFromNamespace("ctree_control", "party"),
list(maxdepth = param$.maxdepth,
mincriterion = 0))
## pass in any model weights
if(!is.null(wts)) theDots$weights <- wts
modelArgs <- c(
list(
formula = as.formula(".outcome ~ ."),
data = dat,
controls = ctl),
theDots)
out <- do.call(getFromNamespace("ctree", "party"), modelArgs)
out
},
predict = function(modelFit, newdata, submodels = NULL) {
if(!is.data.frame(newdata)) newdata <- as.data.frame(newdata)
out <- predict(modelFit, newdata)
if(!is.null(modelFit@responses@levels$.outcome)) out <- as.character(out)
if(is.matrix(out)) out <- out[,1]
out
},
prob = function(modelFit, newdata, submodels = NULL) {
if(!is.data.frame(newdata)) newdata <- as.data.frame(newdata)
obsLevels <- levels(modelFit@data@get("response")[,1])
rawProbs <- treeresponse(modelFit, newdata)
probMatrix <- matrix(unlist(rawProbs), ncol = length(obsLevels), byrow = TRUE)
out <- data.frame(probMatrix)
colnames(out) <- obsLevels
rownames(out) <- NULL
out
},
tags = c('Tree-Based Model', "Implicit Feature Selection"),
levels = function(x) levels(x@data@get("response")[,1]),
sort = function(x) x)
tt <- train(Species ~ ., data = iris, method = modelInfo)
tt
modelInfo <- list(library = "party",
loop = NULL,
type = c("Classification", "Regression"),
parameters = data.frame(parameter = 'mincriterion',
class = 'numeric',
label = '1 - P-Value Threshold'),
grid = function(x, y, len = NULL) {
data.frame(.mincriterion = seq(from = .99, to = 0.01, length = len))
},
fit = function(x, y, wts, param, lev, last, classProbs, ...) {
dat <- x
dat$.outcome <- y
theDots <- list(...)
if(any(names(theDots) == "controls"))
{
theDots$controls@gtctrl@mincriterion <- param$.mincriterion
ctl <- theDots$controls
theDots$controls <- NULL
} else ctl <- do.call(getFromNamespace("ctree_control", "party"),
list(mincriterion = param$.mincriterion))
## pass in any model weights
if(!is.null(wts)) theDots$weights <- wts
modelArgs <- c(
list(
formula = as.formula(".outcome ~ ."),
data = dat,
controls = ctl),
theDots)
out <- do.call(getFromNamespace("ctree", "party"), modelArgs)
out
},
predict = function(modelFit, newdata, submodels = NULL) {
if(!is.data.frame(newdata)) newdata <- as.data.frame(newdata)
out <- predict(modelFit, newdata)
if(!is.null(modelFit@responses@levels$.outcome)) out <- as.character(out)
if(is.matrix(out)) out <- out[,1]
out
},
prob = function(modelFit, newdata, submodels = NULL) {
if(!is.data.frame(newdata)) newdata <- as.data.frame(newdata)
obsLevels <- levels(modelFit@data@get("response")[,1])
rawProbs <- treeresponse(modelFit, newdata)
probMatrix <- matrix(unlist(rawProbs), ncol = length(obsLevels), byrow = TRUE)
out <- data.frame(probMatrix)
colnames(out) <- obsLevels
rownames(out) <- NULL
out
},
tags = c('Tree-Based Model', "Implicit Feature Selection"),
levels = function(x) levels(x@data@get("response")[,1]),
sort = function(x) x)
tt <- train(Species ~ ., data = iris, method = modelInfo)
tt
tt$modelInfo$levels(tt$finalModel)
setwd("~/Code/caret/V6//caret/inst/")
modelFiles <- list.files(path = "models", pattern = "\\.R$")
modelFiles
models <- vector(mode = "list", length = length(modelFiles))
names(models) <- gsub("\\.R", "", modelFiles)
for(i in seq(along = modelFiles)) {
source(file.path("models", modelFiles[i]))
models[[i]] <- modelInfo
rm(modelInfo)
}
save(models, file = "models.RData")
library(caret)
data(BloodBrain)
bbbDescr <-bbbDescr[, -nearZeroVar(bbbDescr)]
ctrl1 <- trainControl(method = "cv", number = 3, verboseIter = TRUE)
set.seed(849)
reg01 <- train(bbbDescr[, 1:3], logBBB, "lm", preProc = "center", trControl = ctrl1)
set.seed(849)
reg02 <- train(bbbDescr[, 1:3], logBBB, "rf", preProc = "center", trControl = ctrl1)
set.seed(849)
reg03 <- train(bbbDescr[, 1:3], logBBB, "lmStepAIC", trControl = ctrl1, trace = 0)
# set.seed(849)
# reg04 <- train(bbbDescr[, 1:3], logBBB, "rvmRadial", trControl = ctrl1, preProc = c("center", "scale"))
#
# set.seed(849)
# reg05 <- train(bbbDescr[, 1:3], logBBB, "rvmPoly", trControl = ctrl1, preProc = c("center", "scale"),
#                tuneGrid = data.frame(.degree = 1, .scale = 0.01))
set.seed(849)
reg06 <- train(bbbDescr[, 1:3], logBBB, "rvmLinear", trControl = ctrl1, preProc = c("center", "scale"))
set.seed(849)
reg07 <- train(bbbDescr[, 1:3], logBBB, "treebag", trControl = ctrl1)
set.seed(849)
reg08 <- train(bbbDescr[, 1:3], logBBB, "knn", trControl = ctrl1, preProc = c("center", "scale"))
set.seed(849)
reg09 <- train(bbbDescr[, 1:3], logBBB, method = "rlm", trControl = ctrl1, preProc = c("center", "scale"))
set.seed(849)
reg10 <- train(bbbDescr[, 1:3], logBBB, method = "M5", trControl = ctrl1)
# set.seed(849)
# reg11 <- train(bbbDescr[, 1:3], logBBB, method = "cubist", trControl = ctrl1)
set.seed(849)
reg12 <- train(bbbDescr[, 1:3], logBBB, method = "earth", trControl = ctrl1)
set.seed(849)
reg13 <- train(bbbDescr[, 1:3], logBBB, method = "gbm", trControl = ctrl1, verbose = FALSE)
set.seed(849)
reg14 <- train(bbbDescr[, 1:3], logBBB, method = "svmPoly", trControl = ctrl1)
set.seed(849)
reg15 <- train(bbbDescr[, 1:3], logBBB, method = "svmRadial", trControl = ctrl1)
set.seed(849)
reg16 <- train(bbbDescr[, 1:3], logBBB, method = "svmLinear", trControl = ctrl1)
set.seed(849)
reg17 <- train(bbbDescr[, 1:4], logBBB, method = "pcr", trControl = ctrl1, preProc = c("center", "scale"))
set.seed(849)
reg18 <- train(bbbDescr[, 1:4], logBBB, method = "pls", trControl = ctrl1, preProc = c("center", "scale"))
set.seed(849)
reg19 <- train(bbbDescr[, 1:4], logBBB, method = "simpls", trControl = ctrl1, preProc = c("center", "scale"))
set.seed(849)
reg20 <- train(bbbDescr[, 1:4], logBBB, method = "kernelpls", trControl = ctrl1, preProc = c("center", "scale"))
set.seed(849)
reg21 <- train(bbbDescr[, 1:4], logBBB, method = "widekernelpls", trControl = ctrl1, preProc = c("center", "scale"))
set.seed(849)
reg22 <- train(bbbDescr[, 1:50], logBBB, method = "leapForward", trControl = ctrl1, tuneLength = 45)
set.seed(849)
reg23 <- train(bbbDescr[, 1:50], logBBB, method = "leapBackward", trControl = ctrl1, tuneLength = 45)
set.seed(849)
reg24 <- train(bbbDescr[, 1:50], logBBB, method = "leapSeq", trControl = ctrl1, tuneLength = 45)
set.seed(849)
reg25 <- train(bbbDescr[, 4:8], logBBB, method = "bstTree", trControl = ctrl1)
set.seed(849)
reg26 <- train(bbbDescr[, 4:8], logBBB, method = "bstLs", trControl = ctrl1)
set.seed(849)
reg27 <- train(bbbDescr[, 4:8], logBBB, method = "bstSm", trControl = ctrl1)
set.seed(849)
reg28 <- train(bbbDescr[, 4:8], logBBB, method = "glmboost", trControl = ctrl1)
set.seed(849)
reg29 <- train(bbbDescr[, 4:8], logBBB, method = "gamboost", trControl = ctrl1)
set.seed(849)
reg30 <- train(bbbDescr[, 4:8], logBBB, method = "lars", trControl = ctrl1, preProc = c("center", "scale"))
set.seed(849)
reg31 <- train(bbbDescr[, 4:8], logBBB, method = "foba", trControl = ctrl1, preProc = c("center", "scale"))
set.seed(849)
reg32 <- train(bbbDescr[, 4:8], logBBB, method = "glmnet", trControl = ctrl1, preProc = c("center", "scale"))
set.seed(849)
reg33 <- train(bbbDescr[, 4:8], logBBB, method = "enet", trControl = ctrl1, preProc = c("center", "scale"))
set.seed(849)
reg34 <- train(bbbDescr[, 4:8], logBBB, method = "blackboost", trControl = ctrl1)
set.seed(849)
reg35 <- train(bbbDescr, logBBB, method = "lasso", trControl = ctrl1)
set.seed(849)
reg36 <- train(bbbDescr[, 4:8], logBBB, method = "partDSA", trControl = ctrl1)
set.seed(849)
reg37 <- train(bbbDescr[, 4:8], logBBB, method = "nnet", trControl = ctrl1,
preProc = c("center", "scale"), trace = FALSE)
source('~/Code/caret/V6/caret/inst/testing.R', echo=TRUE)
?format
?date
format(Sys.time(), "%Y_%m_%d %a %b %d %H:%M:%S %Y")
format(Sys.time(), "%Y_%m_%d_%H_%M")
library(caret)
timestamp <- format(Sys.time(), "%Y_%m_%d_%H_%M")
model <- "lm"
#########################################################################
data(BloodBrain)
bbbDescr <-bbbDescr[, -nearZeroVar(bbbDescr)]
set.seed(2)
inTrain <- createDataPartition(logBBB, p = .90)
trainX <-bbbDescr[inTrain[[1]], ]
trainY <- logBBB[inTrain[[1]]]
testX <- bbbDescr[-inTrain[[1]], ]
testY <- logBBB[-inTrain[[1]]]
rctrl1 <- trainControl(method = "cv", number = 3)
rctrl2 <- trainControl(method = "LOO")
set.seed(849)
test_reg_cv_model <- train(trainX, trainY, method = "lm", preProc = "center", trControl = rctrl1)
test_reg_pred <- predict(test_reg_cv_model, testX)
set.seed(849)
test_reg_loo_model <- train(trainX, trainY, method = "lm", preProc = "center", trControl = rctrl2)
timestamp <- format(Sys.time(), "%Y_%m_%d_%H_%M")
model <- "lm"
file.path(getwd(), "...", "Objects",
paste(model, "_", timestamp, ".RData", sep = ""))
setwd("/Users/kuhna03/Code/caret/V6/testing/")
file.path(getwd(), "...", "Objects",
paste(model, "_", timestamp, ".RData", sep = ""))
library(caret)
timestamp <- format(Sys.time(), "%Y_%m_%d_%H_%M")
model <- "lm"
#########################################################################
data(BloodBrain)
bbbDescr <-bbbDescr[, -nearZeroVar(bbbDescr)]
set.seed(2)
inTrain <- createDataPartition(logBBB, p = .90)
trainX <-bbbDescr[inTrain[[1]], ]
trainY <- logBBB[inTrain[[1]]]
testX <- bbbDescr[-inTrain[[1]], ]
testY <- logBBB[-inTrain[[1]]]
rctrl1 <- trainControl(method = "cv", number = 3)
rctrl2 <- trainControl(method = "LOO")
set.seed(849)
test_reg_cv_model <- train(trainX, trainY, method = "lm", preProc = "center", trControl = rctrl1)
test_reg_pred <- predict(test_reg_cv_model, testX)
# set.seed(849)
# test_reg_loo_model <- train(trainX, trainY, method = "lm", preProc = "center", trControl = rctrl2)
#########################################################################
sInfo <- sessionInfo()
save(test_reg_cv_model, test_reg_pred,
file = file.path(getwd(), "..", "Objects",
paste(model, "_", timestamp, ".RData", sep = "")))
q("no")
setwd("/Users/kuhna03/Code/caret/V6/testing/Code/")
library(caret)
timestamp <- format(Sys.time(), "%Y_%m_%d_%H_%M")
model <- "lm"
#########################################################################
data(BloodBrain)
bbbDescr <-bbbDescr[, -nearZeroVar(bbbDescr)]
set.seed(2)
inTrain <- createDataPartition(logBBB, p = .90)
trainX <-bbbDescr[inTrain[[1]], ]
trainY <- logBBB[inTrain[[1]]]
testX <- bbbDescr[-inTrain[[1]], ]
testY <- logBBB[-inTrain[[1]]]
rctrl1 <- trainControl(method = "cv", number = 3)
rctrl2 <- trainControl(method = "LOO")
set.seed(849)
test_reg_cv_model <- train(trainX, trainY, method = "lm", preProc = "center", trControl = rctrl1)
test_reg_pred <- predict(test_reg_cv_model, testX)
# set.seed(849)
# test_reg_loo_model <- train(trainX, trainY, method = "lm", preProc = "center", trControl = rctrl2)
#########################################################################
sInfo <- sessionInfo()
save(test_reg_cv_model, test_reg_pred,
file = file.path(getwd(), "..", "Objects",
paste(model, "_", timestamp, ".RData", sep = "")))
#q("no")
library(caret)
timestamp <- format(Sys.time(), "%Y_%m_%d_%H_%M")
model <- "lm"
#########################################################################
data(BloodBrain)
bbbDescr <-bbbDescr[, -nearZeroVar(bbbDescr)]
bbbDescr <-bbbDescr[, -findCorrelation(bbbDescr, .5)]
set.seed(2)
inTrain <- createDataPartition(logBBB, p = .90)
trainX <-bbbDescr[inTrain[[1]], ]
trainY <- logBBB[inTrain[[1]]]
testX <- bbbDescr[-inTrain[[1]], ]
testY <- logBBB[-inTrain[[1]]]
rctrl1 <- trainControl(method = "cv", number = 3)
rctrl2 <- trainControl(method = "LOO")
set.seed(849)
test_reg_cv_model <- train(trainX, trainY, method = "lm", preProc = "center", trControl = rctrl1)
test_reg_pred <- predict(test_reg_cv_model, testX)
# set.seed(849)
# test_reg_loo_model <- train(trainX, trainY, method = "lm", preProc = "center", trControl = rctrl2)
#########################################################################
sInfo <- sessionInfo()
save(test_reg_cv_model, test_reg_pred,
file = file.path(getwd(), "..", "Objects",
paste(model, "_", timestamp, ".RData", sep = "")))
q("no")
library(caret)
timestamp <- format(Sys.time(), "%Y_%m_%d_%H_%M")
model <- "lm"
#########################################################################
data(BloodBrain)
bbbDescr <-bbbDescr[, -nearZeroVar(bbbDescr)]
bbbDescr <-bbbDescr[, -findCorrelation(cor(bbbDescr), .5)]
set.seed(2)
inTrain <- createDataPartition(logBBB, p = .90)
trainX <-bbbDescr[inTrain[[1]], ]
trainY <- logBBB[inTrain[[1]]]
testX <- bbbDescr[-inTrain[[1]], ]
testY <- logBBB[-inTrain[[1]]]
rctrl1 <- trainControl(method = "cv", number = 3)
rctrl2 <- trainControl(method = "LOO")
set.seed(849)
test_reg_cv_model <- train(trainX, trainY, method = "lm", preProc = "center", trControl = rctrl1)
test_reg_pred <- predict(test_reg_cv_model, testX)
# set.seed(849)
# test_reg_loo_model <- train(trainX, trainY, method = "lm", preProc = "center", trControl = rctrl2)
#########################################################################
sInfo <- sessionInfo()
save(test_reg_cv_model, test_reg_pred,
file = file.path(getwd(), "..", "Objects",
paste(model, "_", timestamp, ".RData", sep = "")))
#q("no")
?save
sInfo
library(caret)
timestamp <- format(Sys.time(), "%Y_%m_%d_%H_%M")
model <- "lm"
tests <- c("test_reg_cv_model", "test_reg_pred")
#########################################################################
data(BloodBrain)
bbbDescr <-bbbDescr[, -nearZeroVar(bbbDescr)]
bbbDescr <-bbbDescr[, -findCorrelation(cor(bbbDescr), .5)]
set.seed(2)
inTrain <- createDataPartition(logBBB, p = .90)
trainX <-bbbDescr[inTrain[[1]], ]
trainY <- logBBB[inTrain[[1]]]
testX <- bbbDescr[-inTrain[[1]], ]
testY <- logBBB[-inTrain[[1]]]
rctrl1 <- trainControl(method = "cv", number = 3)
rctrl2 <- trainControl(method = "LOO")
set.seed(849)
test_reg_cv_model <- train(trainX, trainY, method = "lm", preProc = "center", trControl = rctrl1)
test_reg_pred <- predict(test_reg_cv_model, testX)
# set.seed(849)
# test_reg_loo_model <- train(trainX, trainY, method = "lm", preProc = "center", trControl = rctrl2)
#########################################################################
sInfo <- sessionInfo()
save(list = c(tests, sInfo, timeStamp),
file = file.path(getwd(), "..", "Objects",
paste(model, "_", timestamp, ".RData", sep = "")))
#q("no")
library(caret)
timestamp <- format(Sys.time(), "%Y_%m_%d_%H_%M")
model <- "lm"
tests <- c("test_reg_cv_model", "test_reg_pred")
#########################################################################
data(BloodBrain)
bbbDescr <-bbbDescr[, -nearZeroVar(bbbDescr)]
bbbDescr <-bbbDescr[, -findCorrelation(cor(bbbDescr), .5)]
set.seed(2)
inTrain <- createDataPartition(logBBB, p = .90)
trainX <-bbbDescr[inTrain[[1]], ]
trainY <- logBBB[inTrain[[1]]]
testX <- bbbDescr[-inTrain[[1]], ]
testY <- logBBB[-inTrain[[1]]]
rctrl1 <- trainControl(method = "cv", number = 3)
rctrl2 <- trainControl(method = "LOO")
set.seed(849)
test_reg_cv_model <- train(trainX, trainY, method = "lm", preProc = "center", trControl = rctrl1)
test_reg_pred <- predict(test_reg_cv_model, testX)
# set.seed(849)
# test_reg_loo_model <- train(trainX, trainY, method = "lm", preProc = "center", trControl = rctrl2)
#########################################################################
sInfo <- sessionInfo()
save(list = c(tests, sInfo, timestamp),
file = file.path(getwd(), "..", "Objects",
paste(model, "_", timestamp, ".RData", sep = "")))
#q("no")
c(tests, sInfo, timestamp)
tests <- c("test_reg_cv_model", "test_reg_pred")
tests
save(list = c(tests, "sInfo", "timestamp"),
file = file.path(getwd(), "..", "Objects",
paste(model, "_", timestamp, ".RData", sep = "")))
library(caret)
timestamp <- format(Sys.time(), "%Y_%m_%d_%H_%M")
model <- "lm"
tests <- c("test_reg_cv_model", "test_reg_pred")
#########################################################################
data(BloodBrain)
bbbDescr <-bbbDescr[, -nearZeroVar(bbbDescr)]
bbbDescr <-bbbDescr[, -findCorrelation(cor(bbbDescr), .5)]
set.seed(2)
inTrain <- createDataPartition(logBBB, p = .90)
trainX <-bbbDescr[inTrain[[1]], ]
trainY <- logBBB[inTrain[[1]]]
testX <- bbbDescr[-inTrain[[1]], ]
testY <- logBBB[-inTrain[[1]]]
rctrl1 <- trainControl(method = "cv", number = 3)
rctrl2 <- trainControl(method = "LOO")
set.seed(849)
test_reg_cv_model <- train(trainX, trainY, method = "lm", preProc = "center", trControl = rctrl1)
test_reg_pred <- predict(test_reg_cv_model, testX)
# set.seed(849)
# test_reg_loo_model <- train(trainX, trainY, method = "lm", preProc = "center", trControl = rctrl2)
#########################################################################
sInfo <- sessionInfo()
save(list = c(tests, "sInfo", "timestamp"),
file = file.path(getwd(), "..", "Objects",
paste(model, "_", timestamp, ".RData", sep = "")))
#q("no")
apropos("pacakge")
apropos("package")
packageDescription("caret")
packageDescription("caret")$version
packageDescription("caret")$Version
file.path(getwd(), "..", "Objects",
paste(model, "_", timestamp, "_",
packageDescription("caret")$Version,
".RData", sep = ""))
file.path(getwd(), "..", "Objects",
paste(model, "__", timestamp, "__",
packageDescription("caret")$Version,
".RData", sep = ""))
library(caret)
timestamp <- format(Sys.time(), "%Y_%m_%d_%H_%M")
model <- "rlm"
tests <- c("test_reg_cv_model", "test_reg_pred")
#########################################################################
data(BloodBrain)
bbbDescr <-bbbDescr[, -nearZeroVar(bbbDescr)]
bbbDescr <-bbbDescr[, -findCorrelation(cor(bbbDescr), .5)]
set.seed(2)
inTrain <- createDataPartition(logBBB, p = .90)
trainX <-bbbDescr[inTrain[[1]], ]
trainY <- logBBB[inTrain[[1]]]
testX <- bbbDescr[-inTrain[[1]], ]
testY <- logBBB[-inTrain[[1]]]
rctrl1 <- trainControl(method = "cv", number = 3)
rctrl2 <- trainControl(method = "LOO")
set.seed(849)
test_reg_cv_model <- train(trainX, trainY, method = "rlm", trControl = rctrl1)
test_reg_pred <- predict(test_reg_cv_model, testX)
test_reg_loo_model <- train(trainX, trainY, method = "lm", trControl = rctrl2)
test_reg_loo_model <- train(trainX, trainY, method = "rlm", trControl = rctrl2)
?trainControl
rctrl2 <- trainControl(method = "LOOCV")
test_reg_loo_model <- train(trainX, trainY, method = "rlm", trControl = rctrl2)
test_reg_loo_model
rctrl1 <- trainControl(method = "cv", number = 3, returnResamp = "all")
rctrl2 <- trainControl(method = "LOOCV", returnResamp = "all")
set.seed(849)
test_reg_cv_model <- train(trainX, trainY, method = "rlm", trControl = rctrl1)
test_reg_pred <- predict(test_reg_cv_model, testX)
set.seed(849)
test_reg_loo_model <- train(trainX, trainY, method = "rlm", trControl = rctrl2)
test_reg_loo_model$resample
test_reg_loo_model$resamples
names(test_reg_loo_model)
test_reg_loo_model$resample
library(caret)
timestamp <- format(Sys.time(), "%Y_%m_%d_%H_%M")
model <- "lm"
tests <- c("test_reg_cv_model", "test_reg_pred", "test_reg_loo_model")
#########################################################################
data(BloodBrain)
bbbDescr <-bbbDescr[, -nearZeroVar(bbbDescr)]
bbbDescr <-bbbDescr[, -findCorrelation(cor(bbbDescr), .5)]
set.seed(2)
inTrain <- createDataPartition(logBBB, p = .90)
trainX <-bbbDescr[inTrain[[1]], ]
trainY <- logBBB[inTrain[[1]]]
testX <- bbbDescr[-inTrain[[1]], ]
testY <- logBBB[-inTrain[[1]]]
rctrl1 <- trainControl(method = "cv", number = 3, returnResamp = "all")
rctrl2 <- trainControl(method = "LOOCV")
set.seed(849)
test_reg_cv_model <- train(trainX, trainY, method = "lm", trControl = rctrl1)
test_reg_pred <- predict(test_reg_cv_model, testX)
set.seed(849)
test_reg_loo_model <- train(trainX, trainY, method = "lm", trControl = rctrl2)
#########################################################################
sInfo <- sessionInfo()
save(list = c(tests, "sInfo", "timestamp"),
file = file.path(getwd(), "..", "Objects",
paste(model, "__", timestamp, "__",
packageDescription("caret")$Version,
".RData", sep = "")))
q("no")
